map $http_user_agent $log_ua {
   ~ELB-HealthChecker 0;
   ~kube-probe 0;

   default 1;
}

upstream unicorn {
   server unix:/app/unicorn.sock fail_timeout=0;
   server 0.0.0.0:8080 fail_timeout=0;
}

server {
   listen 80;
   server_name ${NGINX_SERVER_NAME};

   # access_log /var/log/nginx/download-staging.pixta.jp.access.log combined_elb;
   access_log /dev/stdout combined_elb if=$log_ua;

   client_max_body_size 10m;

   set $redirect_to_top true;
   if ( $http_x_forwarded_for = "221.117.81.236" ) {
      set $redirect_to_top false;
   }
   if ( $http_x_forwarded_for = "14.162.145.8" ) {
      set $redirect_to_top false;
   }
   if ( $http_x_forwarded_for = "220.135.37.17" ) {
      set $redirect_to_top false;
   }
   if ( $redirect_to_top = true ) {
      rewrite ^/admin/? https://pixta.jp/ permanent;
   }

   # root /srv/www/pixta_downloader/current/public/;
   root /app/public;
   # location /nginx_status {
   #    listen 8080;

   #    stub_status on;
   #    access_log on;
   #    allow all; # REPLACE with your access policy
   # }

   # location ~* ^(?!.*download|/health_checks).*(?<!\.css|\.ico|\.jpg|\.js|\.png)$ {
   #    rewrite ^.*$ https://pixta.jp permanent;
   # }


   location / {
      try_files $uri/index.html $uri/index.htm @unicorn;
   }

   location ^~ /assets/ {
      gzip_static on;
      expires max;
      add_header Cache-Control public;
      add_header Access-Control-Allow-Origin "$http_origin";
      add_header Access-Control-Allow-Methods 'GET, PUT, POST, DELETE';
      add_header Access-Control-Expose-Headers ETag;
   }

   location @unicorn {
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Host ${NGINX_HTTP_HOST};
      proxy_redirect off;

      proxy_read_timeout 300;
      proxy_send_timeout 300;

      proxy_next_upstream error;

      # If you don't find the filename in the static files
      # Then request it from the unicorn server
      if (!-f $request_filename) {
         proxy_pass http://unicorn;
         break;
      }
   }

   location /nginx_status {
      stub_status on;
      access_log off;
      allow 127.0.0.1;
      deny all;
   }

   error_page 500 502 503 504 /500.html;
   location = /500.html {
      root /app/public/;
   }
}