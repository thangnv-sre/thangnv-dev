map $http_user_agent $log_ua {
    ~ELB-HealthChecker 0;
    ~kube-probe 0;

    default 1;
}

upstream unicorn {
    server unix:/app/unicorn.sock fail_timeout=0;
}

server {
    listen 80;
    server_name ${NGINX_SERVER_NAME};

    access_log /dev/stdout nginx if=$log_ua;
    keepalive_timeout 5;
    root /app/public;

    set_real_ip_from ${NGINX_VPN_RANGE};
    set_real_ip_from 127.0.0.1;
    real_ip_header X-Forwarded-For;
    real_ip_recursive on;

    location / {
        try_files $uri/index.html $uri/index.htm @unicorn;
        if ($request_method = 'OPTIONS' ) {
            add_header "Access-Control-Allow-Origin" $http_origin;
            add_header "Access-Control-Allow-Methods"
                "GET, POST, OPTIONS, PUT, DELETE, HEAD";
            add_header "Access-Control-Allow-Credentials" "true";
            add_header "Access-Control-Allow-Headers"
                "Authorization, Origin, X-Requested-With, Content-Type, Accept, HTTP_ORIGIN, cache-control";
            return 200;
        }
    }

    location @unicorn {
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host ${NGINX_HTTP_HOST};
        proxy_redirect off;

        proxy_read_timeout 300;
        proxy_send_timeout 300;

        # If you don't find the filename in the static files
        # Then request it from the unicorn server
        if (!-f $request_filename) {
            proxy_pass http://unicorn;
            break;
        }
    }

    error_page 500 502 503 504 /500.html;
    location = /500.html {
        root /app/public/;
    }
}