map $http_user_agent $log_ua {
   ~ELB-HealthChecker 0;
   ~kube-probe 0;

   default 1;
}

upstream rails {
   # server unix:/app/unicorn.sock fail_timeout=0;
   server localhost:3000 fail_timeout=0;
}

server {
   listen 80;
   server_name ${NGINX_SERVER_NAME};

   # access_log /var/log/nginx/download-staging.pixta.jp.access.log combined_elb;
   access_log /dev/stdout nginx if=$log_ua;

   keepalive_timeout 300;

   # root /srv/www/pixta_downloader/current/public/;
   root /app/public;

   location ^~ /reproxy {
      internal;
      set $reproxy $upstream_http_x_reproxy_url;
      proxy_hide_header Content-Type;
      proxy_pass_header X-Accel-Redirect;
      proxy_set_header Authorization "";
      resolver ${NGINX_RESOLVER_HOST};
      resolver_timeout 10s;

      proxy_read_timeout 300;
      proxy_send_timeout 300;

      proxy_pass $reproxy;
   }

   location ~* ^(?!.*download|/health_checks).*(?<!\.css|\.ico|\.jpg|\.js|\.png)$ {
      rewrite ^.*$ https://pixta.jp permanent;
   }


   location / {
      try_files $uri/index.html $uri/index.htm @rails;
      if ($request_method = 'OPTIONS' ) {
         add_header "Access-Control-Allow-Origin" $http_origin;
         add_header "Access-Control-Allow-Methods"
            "GET, POST, OPTIONS, PUT, DELETE, HEAD";
         add_header "Access-Control-Allow-Credentials" "true";
         add_header "Access-Control-Allow-Headers"
            "Authorization, Origin, X-Requested-With, Content-Type, Accept, HTTP_ORIGIN, cache-control";
         return 200;
      }
   }

   location @rails {
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Host ${NGINX_HTTP_HOST};
      proxy_redirect off;

      proxy_read_timeout 300;
      proxy_send_timeout 300;

      # If you don't find the filename in the static files
      # Then request it from the rails server
      if (!-f $request_filename) {
         proxy_pass http://rails;
         break;
      }
   }

   error_page 500 502 503 504 /500.html;
   location = /500.html {
      root /app/public/;
   }
}